<div {{if .ReadmeInList}}id="readme" {{end}}class="{{TabSizeClass .Editorconfig .FileName}} non-diff-file-content">
	{{- if .FileError}}
		<div class="ui error message">
			<div class="text left tw-whitespace-pre">{{.FileError}}</div>
		</div>
	{{end}}
	{{- if .FileWarning}}
		<div class="ui warning message">
			<div class="text left tw-whitespace-pre">{{.FileWarning}}</div>
		</div>
	{{end}}

	{{if not .ReadmeInList}}
		<div id="repo-file-commit-box" class="ui segment list-header tw-mb-4 tw-flex tw-justify-between">
			{{template "repo/latest_commit" .}}
			{{if .LatestCommit}}
				{{if .LatestCommit.Committer}}
					<div class="text grey age">
						{{DateUtils.TimeSince .LatestCommit.Committer.When}}
					</div>
				{{end}}
			{{end}}
		</div>
	{{end}}

	<h4 class="file-header ui top attached header tw-flex tw-items-center tw-justify-between tw-flex-wrap">
		<div class="file-header-left tw-flex tw-items-center tw-py-2 tw-pr-4">
			{{if .ReadmeInList}}
				{{svg "octicon-book" 16 "tw-mr-2"}}
				<strong><a class="muted" href="#readme">{{.FileName}}</a></strong>
			{{else}}
				{{template "repo/file_info" .}}
			{{end}}
		</div>
		<div class="file-header-right file-actions tw-flex tw-items-center tw-flex-wrap">
			{{if .HasSourceRenderedToggle}}
				<div class="ui compact icon buttons">
					<a href="?display=source" class="ui mini basic button {{if .IsDisplayingSource}}active{{end}}" data-tooltip-content="{{ctx.Locale.Tr "repo.file_view_source"}}">{{svg "octicon-code" 15}}</a>
					<a href="{{$.Link}}" class="ui mini basic button {{if .IsDisplayingRendered}}active{{end}}" data-tooltip-content="{{ctx.Locale.Tr "repo.file_view_rendered"}}">{{svg "octicon-file" 15}}</a>
				</div>
			{{end}}
			{{if not .ReadmeInList}}
				<div class="ui buttons tw-mr-1">
					<a class="ui mini basic button" href="{{$.RawFileLink}}">{{ctx.Locale.Tr "repo.file_raw"}}</a>
					{{if or .RefFullName.IsBranch .RefFullName.IsTag}}
						<a class="ui mini basic button" href="{{.RepoLink}}/src/commit/{{PathEscape .CommitID}}/{{PathEscapeSegments .TreePath}}">{{ctx.Locale.Tr "repo.file_permalink"}}</a>
					{{end}}
					{{if .IsRepresentableAsText}}
						<a class="ui mini basic button" href="{{.RepoLink}}/blame/{{.RefTypeNameSubURL}}/{{PathEscapeSegments .TreePath}}">{{ctx.Locale.Tr "repo.blame"}}</a>
					{{end}}
					<a class="ui mini basic button" href="{{.RepoLink}}/commits/{{.RefTypeNameSubURL}}/{{PathEscapeSegments .TreePath}}">{{ctx.Locale.Tr "repo.file_history"}}</a>
					{{if .EscapeStatus.Escaped}}
						<button class="ui mini basic button unescape-button tw-hidden">{{ctx.Locale.Tr "repo.unescape_control_characters"}}</button>
						<button class="ui mini basic button escape-button">{{ctx.Locale.Tr "repo.escape_control_characters"}}</button>
					{{end}}
				</div>
				<a download class="btn-octicon" data-tooltip-content="{{ctx.Locale.Tr "repo.download_file"}}" href="{{$.RawFileLink}}">{{svg "octicon-download"}}</a>
				<a id="copy-content" class="btn-octicon {{if not .CanCopyContent}} disabled{{end}}"{{if or .IsImageFile (and .HasSourceRenderedToggle (not .IsDisplayingSource))}} data-link="{{$.RawFileLink}}"{{end}} data-tooltip-content="{{if .CanCopyContent}}{{ctx.Locale.Tr "copy_content"}}{{else}}{{ctx.Locale.Tr "copy_type_unsupported"}}{{end}}">{{svg "octicon-copy"}}</a>
				{{if .EnableFeed}}
				<a class="btn-octicon" href="{{$.RepoLink}}/rss/{{$.RefTypeNameSubURL}}/{{PathEscapeSegments .TreePath}}" data-tooltip-content="{{ctx.Locale.Tr "rss_feed"}}">
					{{svg "octicon-rss"}}
				</a>
				{{end}}
				{{if .Repository.CanEnableEditor}}
					{{if .CanEditFile}}
						<a class="btn-octicon" data-tooltip-content="{{.EditFileTooltip}}" href="{{.RepoLink}}/_edit/{{PathEscapeSegments .BranchName}}/{{PathEscapeSegments .TreePath}}">{{svg "octicon-pencil"}}</a>
					{{else}}
						<span class="btn-octicon disabled" data-tooltip-content="{{.EditFileTooltip}}">{{svg "octicon-pencil"}}</span>
					{{end}}
					{{if .CanDeleteFile}}
						<a class="btn-octicon btn-octicon-danger" data-tooltip-content="{{.DeleteFileTooltip}}" href="{{.RepoLink}}/_delete/{{PathEscapeSegments .BranchName}}/{{PathEscapeSegments .TreePath}}">{{svg "octicon-trash"}}</a>
					{{else}}
						<span class="btn-octicon disabled" data-tooltip-content="{{.DeleteFileTooltip}}">{{svg "octicon-trash"}}</span>
					{{end}}
				{{end}}
			{{else if .EscapeStatus.Escaped}}
				<button class="ui mini basic button unescape-button tw-mr-1 tw-hidden">{{ctx.Locale.Tr "repo.unescape_control_characters"}}</button>
				<button class="ui mini basic button escape-button tw-mr-1">{{ctx.Locale.Tr "repo.escape_control_characters"}}</button>
			{{end}}
			{{if and .ReadmeInList .CanEditReadmeFile}}
				<a class="btn-octicon" data-tooltip-content="{{ctx.Locale.Tr "repo.editor.edit_this_file"}}" href="{{.RepoLink}}/_edit/{{PathEscapeSegments .BranchName}}/{{PathEscapeSegments .TreePath}}/{{PathEscapeSegments .FileName}}">{{svg "octicon-pencil"}}</a>
			{{end}}
		</div>
	</h4>
	<div class="ui bottom attached table unstackable segment">
		{{if not (or .IsMarkup .IsRenderedHTML)}}
			{{template "repo/unicode_escape_prompt" dict "EscapeStatus" .EscapeStatus "root" $}}
		{{end}}
		<div class="file-view{{if .IsMarkup}} markup {{.MarkupType}}{{else if .IsPlainText}} plain-text{{else if .IsTextSource}} code-view{{end}}">
			{{if .IsFileTooLarge}}
				{{template "shared/filetoolarge" dict "RawFileLink" .RawFileLink}}
			{{else if not .FileSize}}
				{{template "shared/fileisempty"}}
			{{else if .IsMarkup}}
				{{if .FileContent}}{{.FileContent}}{{end}}
			{{else if .IsPlainText}}
				<pre>{{if .FileContent}}{{.FileContent}}{{end}}</pre>
			{{else if not .IsTextSource}}
				<div class="view-raw">
					{{if .IsImageFile}}
						<img src="{{$.RawFileLink}}">
					{{else if .IsVideoFile}}
						<video controls src="{{$.RawFileLink}}">
							<strong>{{ctx.Locale.Tr "repo.video_not_supported_in_browser"}}</strong>
						</video>
					{{else if .IsAudioFile}}
						<audio controls src="{{$.RawFileLink}}">
							<strong>{{ctx.Locale.Tr "repo.audio_not_supported_in_browser"}}</strong>
						</audio>
					{{else if .IsPDFFile}}
						<div class="pdf-content is-loading" data-src="{{$.RawFileLink}}" data-fallback-button-text="{{ctx.Locale.Tr "repo.diff.view_file"}}"></div>
					{{else}}
						<a href="{{$.RawFileLink}}" rel="nofollow" class="tw-p-4">{{ctx.Locale.Tr "repo.file_view_raw"}}</a>
					{{end}}
				</div>
			{{else if .FileSize}}
				<table>
					<tbody>
						{{range $idx, $code := .FileContent}}
						{{$line := Eval $idx "+" 1}}
						<tr>
							<td id="L{{$line}}" class="lines-num"><span id="L{{$line}}" data-line-number="{{$line}}"></span></td>
							{{if $.EscapeStatus.Escaped}}
								<td class="lines-escape">{{if (index $.LineEscapeStatus $idx).Escaped}}<button class="toggle-escape-button btn interact-bg" title="{{if (index $.LineEscapeStatus $idx).HasInvisible}}{{ctx.Locale.Tr "repo.invisible_runes_line"}} {{end}}{{if (index $.LineEscapeStatus $idx).HasAmbiguous}}{{ctx.Locale.Tr "repo.ambiguous_runes_line"}}{{end}}"></button>{{end}}</td>
							{{end}}
							<td rel="L{{$line}}" class="lines-code chroma"><code class="code-inner">{{$code}}</code></td>
						</tr>
						{{end}}
					</tbody>
				</table>
				<div class="code-line-menu tippy-target">
					{{if $.Permission.CanRead ctx.Consts.RepoUnitTypeIssues}}
						<a class="item ref-in-new-issue" role="menuitem" data-url-issue-new="{{.RepoLink}}/issues/new" data-url-param-body-link="{{.Repository.Link}}/src/commit/{{PathEscape .CommitID}}/{{PathEscapeSegments .TreePath}}{{if $.HasSourceRenderedToggle}}?display=source{{end}}" rel="nofollow noindex">{{ctx.Locale.Tr "repo.issues.context.reference_issue"}}</a>
					{{end}}
					<a class="item view_git_blame" role="menuitem" href="{{.Repository.Link}}/blame/commit/{{PathEscape .CommitID}}/{{PathEscapeSegments .TreePath}}">{{ctx.Locale.Tr "repo.view_git_blame"}}</a>
					<a class="item copy-line-permalink" role="menuitem" data-url="{{.Repository.Link}}/src/commit/{{PathEscape .CommitID}}/{{PathEscapeSegments .TreePath}}{{if $.HasSourceRenderedToggle}}?display=source{{end}}">{{ctx.Locale.Tr "repo.file_copy_permalink"}}</a>
				</div>
			{{end}}
		</div>
	</div>
</div>

<!-- Define loading flags -->
<script>
  console.log("DEBUG: view_file.tmpl is rendering. FileName = '{{.FileName}}'");
  
  // Check if the filename has a .parquet extension (case insensitive)
  const fileName = "{{.FileName}}";
  const isParquet = fileName.toLowerCase().endsWith('.parquet');
  const isCSV = fileName.toLowerCase().endsWith('.csv');
  const isJSON = fileName.toLowerCase().endsWith('.json');
  
  console.log("DEBUG: File type detection = ", {
    fileName: fileName,
    isParquet: isParquet,
    isCSV: isCSV,
    isJSON: isJSON
  });
  
  console.log("DEBUG: RawURL = '{{.RawURL}}'");
  console.log("DEBUG: RawFileLink = '{{$.RawFileLink}}'");
  
  window.__fileType = isParquet ? 'parquet' : (isCSV ? 'csv' : (isJSON ? 'json' : null));
</script>

<!-- Load DuckDB using the recommended method from the official docs -->
<script type="module">
  // Import the DuckDB module
  import * as duckdb from 'https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@1.24.0/+esm';
  
  // Store the imported module on the window object for later use
  window.duckdb = duckdb;
  
  // Define the paths to required WASM files
  const JSDELIVR_BUNDLES = {
    mvp: {
      mainModule: 'https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@1.24.0/dist/duckdb-mvp.wasm',
      mainWorker: 'https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@1.24.0/dist/duckdb-browser-mvp.worker.js',
    },
    eh: {
      mainModule: 'https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@1.24.0/dist/duckdb-eh.wasm',
      mainWorker: 'https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@1.24.0/dist/duckdb-browser-eh.worker.js',
    }
  };
  
  try {
    // Select a bundle based on browser capabilities
    const bundle = await duckdb.selectBundle(JSDELIVR_BUNDLES);
    
    // Create a URL for the worker
    const workerUrl = URL.createObjectURL(
      new Blob([`importScripts("${bundle.mainWorker}");`], { type: 'text/javascript' })
    );
    
    // Create logger and worker
    const logger = new duckdb.ConsoleLogger();
    const worker = new Worker(workerUrl);
    
    // Create a DB instance
    const db = new duckdb.AsyncDuckDB(logger, worker);
    await db.instantiate(bundle.mainModule);
    URL.revokeObjectURL(workerUrl);
    
    // Make the DB instance available
    window.duckdbInstance = db;
    window.__duckdbLoaded = true;
    console.log("DuckDB loaded successfully:", window.duckdbInstance);
    
  } catch (e) {
    console.error("Failed to load DuckDB:", e);
    window.__duckdbLoaded = false;
  }
</script>

<!-- Handle loading of Parquet files with correct content type -->
<script>
  if (isParquet) {
    // Configure this specific page for Parquet files
    window.__parquetFilePath = "{{$.RawFileLink}}";
    console.log("Parquet file detected, setting up for binary handling:", window.__parquetFilePath);
  }
</script>

<!-- Always include the dataset viewer for files -->
<div id="dataset-preview" data-file-url="{{$.RawFileLink}}" data-file-type=""></div>

<!-- Initialize file type after DOM is ready -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const previewElement = document.getElementById("dataset-preview");
    if (previewElement && window.__fileType) {
      console.log("Setting file type:", window.__fileType);
      previewElement.setAttribute("data-file-type", window.__fileType);
    }
  });
</script>

<!-- Load our dataset viewer last -->
<script type="application/javascript" src="/assets/js/dataset-preview.js"></script>
